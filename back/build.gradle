plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
}

group = 'org.pknu'
version = '1.1.0-SNAPSHOT'

jacoco {
    toolVersion = "0.8.13"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.hibernate:hibernate-validator:8.0.1.Final'
    implementation 'org.springframework.boot:spring-boot-starter-aop'        // aop
    implementation 'org.springframework.retry:spring-retry'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'com.h2database:h2'

    testImplementation 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'com.mysql:mysql-connector-j'

    implementation 'org.mariadb.jdbc:mariadb-java-client'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'


    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.1.2'
    implementation 'org.springframework.cloud:spring-cloud-commons'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // QueryDSL
    implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Point
    implementation "org.hibernate:hibernate-spatial:6.5.0.Final"
    implementation "com.querydsl:querydsl-sql-spatial:5.1.0"

    //jjwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    //Gson
    implementation 'com.google.code.gson:gson:2.9.0'

    //thumbnail
    implementation 'net.coobird:thumbnailator:0.4.20'

    //S3
    implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.4.4'

    // ObjectMapper의 LocalDateTime 인식문제로 추가
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    //proj4j
    implementation 'org.locationtech.proj4j:proj4j:1.3.0'
    implementation 'org.locationtech.proj4j:proj4j-epsg:1.3.0'

    implementation 'org.bouncycastle:bcprov-jdk18on:1.78'
    implementation 'org.bouncycastle:bcpkix-jdk18on:1.78'

    //FCM
    implementation 'com.google.firebase:firebase-admin:9.4.3'

    // Spring Data Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.apache.commons:commons-pool2:2.12.0'

    // Embeded Redis
    testImplementation 'com.github.codemonstur:embedded-redis:1.4.3'

    // 비동기 코드 테스트를 위한 Awaitility
    testImplementation group: 'org.awaitility', name: 'awaitility', version: '4.3.0'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'      // 테스트가 끝난 후 jacoco 보고서 생성
}

jar {
    enabled = false
}

// Querydsl 설정부
def querydslDir = "$buildDir/generated/querydsl"


// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile).configureEach {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}
// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [querydslDir]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(querydslDir)
}

// jacoco 보고서 종류. 일단은 html만
jacocoTestReport {
    reports {
        xml {
            enabled false
        }
        csv {
            enabled false
        }
        html {
            enabled true
        }

        xml.destination file(project.layout.buildDirectory.dir("jacoco/index.xml")) as File
        csv.destination file(project.layout.buildDirectory.dir("jacoco/index.csv")) as File
        html.destination file(project.layout.buildDirectory.dir("jacoco/index.html")) as File
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [   // 제외할 패키지 또는 클래스
                                                    "**/*Application*",
                                                    "**/*Dto.class",
                                                    "**/*DTO.class",
                                                    "**/*Vo.class",
                                                    "**/*VO.class",
                                                    "**/config/**",        // 패키지 단위로도 가능
                                                    "**/exception/**",
                                                    "**/controller/**",
                                                    "**/domain/**",
                                                    "**/apiPayload/**",
                                                    "**/filter/**"
                    ])
                })
        )
    }
}

// 테스트 기준. 라인, 분기 60% 커버리지
jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.60
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.60
            }
        }
    }
}