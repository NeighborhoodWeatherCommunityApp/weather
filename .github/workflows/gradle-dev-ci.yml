name: CI Pipeline

on:
  pull_request:
    branches:
      - dev

    paths:
      - back/**
      - .github/**

  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      GRADLE_USER_HOME: ${{ github.workspace }}/.gradle

    steps:
      - uses: actions/checkout@v4

      - name: JDK 설치
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 의존성 캐싱
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 환경변수 주입
        uses: microsoft/variable-substitution@v1
        with:
          files: "**/src/test/resources/application.yml"
        env:
          spring.datasource.url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
          spring.datasource.username: sa
          spring.datasource.password:
          api.weather.service-key: ${{ secrets.SHORT_TERM_FORECAST_API_KEY }}
          spring.jwt.key: ${{ secrets.JWT_KEY }}
          spring.sigs.key: ${{ secrets.CONSUMER_KEY }}
          spring.sigs.secret: ${{ secrets.CONSUMER_SECRET }}
          cloud.aws.credentials.access-key: ${{ secrets.PROD_S3_ACCESS_KEY }}
          cloud.aws.credentials.secret-key: ${{ secrets.PROD_S3_SECRET_KEY }}
          cloud.aws.s3.bucket: ${{ secrets.PROD_S3_BUCKET_NAME }}
          spring.weather.key: ${{ secrets.METEOROLOGICAL_ADMIN_KEY }}
          spring.kakao.admin_key: ${{ secrets.KAKAO_SERVICE_ADMIN_KEY }}
          apple.client-id: ${{ secrets.CLIENT_ID }}
          apple.team-id: ${{ secrets.TEAM_ID }}
          apple.key.id: ${{ secrets.APPLE_KEY_ID }}
          apple.key.content: ${{ secrets.APPLE_KEY }}
          fcm.project-id: ${{secrets.FCM_ID}}
          fcm.service-account: ${{secrets.FCM_CREDENTIAL}}
          spring.data.redis.host: localhost
          spring.data.redis.port: 63790
          spring.data.redis.password:

      - name: 권한 부여
        run: chmod +x back/gradlew

      - name: 자동 캐시/빌드 캐시 연동
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false

      - name: 테스트 시작 (캐시 적중시 테스트 생략)
        working-directory: back
        run: ./gradlew test -i --build-cache

  build-and-push:
    runs-on: dev-self-hosted
    needs: test
    if: ${{ needs.test.result == 'success' }}

    steps:
      - uses: actions/checkout@v4

      - name: JDK 설치
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 권한 부여
        run: chmod +x back/gradlew

      - name: 환경변수 주입
        uses: microsoft/variable-substitution@v1
        with:
          files: "**/src/main/resources/application.yml"
        env:
          spring.datasource.url: ${{ secrets.DB_URL }}
          spring.datasource.username: ${{ secrets.DB_USERNAME }}
          spring.datasource.password: ${{ secrets.DB_PASSWORD }}
          api.weather.service-key: ${{ secrets.SHORT_TERM_FORECAST_API_KEY }}
          spring.jwt.key: ${{ secrets.JWT_KEY }}
          spring.sigs.key: ${{ secrets.CONSUMER_KEY }}
          spring.sigs.secret: ${{ secrets.CONSUMER_SECRET }}
          cloud.aws.credentials.access-key: ${{ secrets.S3_ACCESS_KEY }}
          cloud.aws.credentials.secret-key: ${{ secrets.S3_SECRET_KEY }}
          cloud.aws.s3.bucket: ${{ secrets.S3_BUCKET_PROD }}
          cloud.aws.cdn.cloud-front: ${{ secrets.CLOUD_FRONT_PROD }}
          spring.weather.key: ${{ secrets.METEOROLOGICAL_ADMIN_KEY }}
          spring.kakao.admin_key: ${{ secrets.KAKAO_SERVICE_ADMIN_KEY }}
          apple.client-id: ${{ secrets.CLIENT_ID }}
          apple.team-id: ${{ secrets.TEAM_ID }}
          apple.key.id: ${{ secrets.APPLE_KEY_ID }}
          apple.key.content: ${{ secrets.APPLE_KEY }}
          fcm.project-id: ${{secrets.FCM_ID}}
          fcm.service-account: ${{secrets.FCM_CREDENTIAL}}
          log-option: dev
          spring.data.redis.host: ${{secrets.REDIS_HOST_DEV}}
          spring.data.redis.port: ${{secrets.REDIS_PORT_DEV}}
          spring.data.redis.password: ${{secrets.REDIS_PASSWORD_DEV}}

      - name: 의존성 캐싱
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 빌드
        working-directory: back
        run: ./gradlew build -x test -i

      - name: 도커 이미지로 빌드
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/github-actions-demo ./back

      - name: 도커 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: 도커 허브로 푸시
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/github-actions-demo
