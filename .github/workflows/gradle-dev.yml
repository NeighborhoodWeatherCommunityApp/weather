name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - feat/**
      - fix/**
      - refactor/**
      - bug/**
      - config/**
      - ci/**
#    paths:
#      - back/**
#
#  push:
#    branches:
#      - dev
#    paths:
#      - back/**

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set yml value
        uses: microsoft/variable-substitution@v1
        with:
          files: "**/src/main/resources/application.yml"
        env:
          spring.datasource.url: ${{ secrets.DB_URL }}
          spring.datasource.username: ${{ secrets.DB_USERNAME }}
          spring.datasource.password: ${{ secrets.DB_PASSWORD }}
          api.weather.service-key: ${{ secrets.SHORT_TERM_FORECAST_API_KEY }}
          spring.jwt.key: ${{ secrets.JWT_KEY }}
          spring.sigs.key: ${{ secrets.CONSUMER_KEY }}
          spring.sigs.secret: ${{ secrets.CONSUMER_SECRET }}
          cloud.aws.credentials.access-key: ${{ secrets.S3_ACCESS_KEY }}
          cloud.aws.credentials.secret-key: ${{ secrets.S3_SECRET_KEY }}
          spring.weather.key: ${{ secrets.METEOROLOGICAL_ADMIN_KEY }}
          spring.kakao.admin_key: ${{ secrets.KAKAO_SERVICE_ADMIN_KEY }}
          apple.client-id: ${{ secrets.CLIENT_ID }}
          apple.team-id: ${{ secrets.TEAM_ID }}
          apple.key.id: ${{ secrets.APPLE_KEY_ID }}
          apple.key.content: ${{ secrets.APPLE_KEY }}
          spring.profiles.active: ${{ secrets.PROFILE_TYPE }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/github-actions-demo ./back

      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Docker Hub push
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/github-actions-demo

  deploy:
    if: github.event_name == 'push'
    runs-on: self-hosted
    needs: build-and-push

    steps:
      - name: 최신 Docker 이미지를 풀
        run: sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/github-actions-demo

      - name: 기존의 Docker 컨테이너를 중지 (if any)
        run: |
          if [ "$(sudo docker ps -q)" ]; then
            sudo docker stop $(sudo docker ps -q)
          fi

      - name: 기존의 Docker 컨테이너를 제거 (if any)
        run: |
          if [ "$(sudo docker ps -a -q)" ]; then
            sudo docker rm $(sudo docker ps -a -q)
          fi

      - name: 새로운 Docker 컨테이너를 실행
        run: |
          sudo docker run --name neighborhood_weather_community_app \
          -e TZ=Asia/Seoul \
          -v /etc/localtime:/etc/localtime:ro \
          -v /etc/timezone:/etc/timezone:ro \
          --rm -d -p 8080:8080 \
          ${{ secrets.DOCKER_HUB_USERNAME }}/github-actions-demo

      - name: 사용하지 않는 Docker 이미지를 정리
        run: sudo docker system prune -f --volumes
